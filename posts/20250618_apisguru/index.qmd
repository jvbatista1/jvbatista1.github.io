---
title: "APIs Guru"
description: "Uma iniciativa para construir uma Wikipedia de APIs"
author:
  - name: Victor Batista
    url: https://jvbatista1.github.io/
    langid: pt
date: 06/18/2025
categories: [Tidytuesday] # self-defined categories
citation: 
  url: https://jvbatista1.github.io/posts/20250618_apisguru/ 
image: apis_guru.svg
draft: false # setting this to `true` will prevent your post from appearing on your listing page until you're ready!
---

No [Tidytuesday](https://github.com/rfordatascience/tidytuesday/blob/main/data/2025/2025-06-17/readme.md){target="_blank"} dessa semana investigamos algumas tabelas da [APIs Guru](https://apis.guru/about/){target="_blank"}, que é uma iniciativa OpenSource de criar uma Wikipedia machine-readable de API disponíveis publicamente, gratuitamente ou não. O resposável pela organização dessa semana [Jon Harmon](https://github.com/jonthegeek) tem criado um [livro](https://dslc-io.github.io/club-wapir/) sobre APIs no R e uma [série de pacotes](https://beekeeper.api2r.org) para trabalhar com essas ferramentas.

Hoje farei a análise em Python.

## Baixando os dados e exploração inicial

```{python}

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

api_info = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-17/api_info.csv')
api_categories = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-17/api_categories.csv')
api_logos = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-17/api_logos.csv')
api_origins = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-17/api_origins.csv')
apisguru_apis = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-06-17/apisguru_apis.csv')

```

Dando uma olhada nas tabelas disponibililzadas, quero me concentrar em especial na tabela `api_info`, pois ela tem a variável `provider_name`, o que me permite checar quais são os principais fornecedores de APIs.

```{python}
api_logos
api_categories
api_origins
apisguru_apis
api_info
```

## Quantos APIs os provedores fornecem?
```{python}
api_info['provider_name'].value_counts().reset_index().head(n=50)
```

Em outra oportunidade, como parte do meu interesse por OpenSource, quero verificar como o tipo de licença interagem com o perifl da API disponibilizada.

```{python}
contagem = api_info[['provider_name', 'license_name']].value_counts().reset_index()

contagem
```

E aqui termino com uma visualização simples dos 10 principais provedores de API

```{python}
top_providers = api_info['provider_name'].value_counts().head(10)

plt.figure(figsize=(12, 6)).patch.set_facecolor('#fff8dc')
ax = sns.barplot(x=top_providers.index, y=top_providers.values, palette='viridis')
plt.title('Top 10 Provedores - Número de Observações', fontsize=16, fontweight='bold')
plt.xlabel('Provedor', fontsize=12)
plt.ylabel('Número de Observações', fontsize=12)
plt.xticks(rotation=45, ha='right')
plt.tight_layout()

# Adiciona os valores no topo das barras
for i, bar in enumerate(ax.patches):
    plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 0.5, 
             str(top_providers.values[i]), ha='center', va='bottom')

# Adiciona grade para facilitar a leitura
plt.grid(axis='y', alpha=0.3)

```

Trabalhar com Python tem sido interessante como alguém que saiu da vida acadêmica e por isso está bastante acostumado com R. Hoje eu perdi um bom tempo em reaprender como fazer contagens por categoria (usando tanto `value_counts()` como `group_by()`). Isso não por falta de conhecimento dessas funções, mas por confusão com as funções do R que fazem a mesma coisa mais com configurações diferentes.

De toda forma, essa é mais um resulado bem legal que gostaria de compartilhar.